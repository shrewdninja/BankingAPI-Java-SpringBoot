package com.example.banking.dto;

import io.swagger.v3.oas.annotations.media.Schema;

import java.math.BigDecimal;

@Schema(description = "Data Transfer Object for Transaction")
public class TransactionDTO {
    @Schema(description = "Unique identifier of the transaction, auto-generated by the server", example = "1", accessMode = Schema.AccessMode.READ_ONLY)
    private Long id;

    @Schema(description = "ID of the account sending funds", example = "1")
    private Long fromAccountId;

    @Schema(description = "ID of the account receiving funds", example = "2")
    private Long toAccountId;

    @Schema(description = "Amount to transfer (up to two decimal places)", example = "100.00")
    private BigDecimal amount;

    @Schema(description = "Timestamp of the transaction, auto-generated by the server", example = "2025-05-19T20:12:34.567", accessMode = Schema.AccessMode.READ_ONLY)
    private String timestamp;

    public TransactionDTO() {}

    public TransactionDTO(Long id, Long fromAccountId, Long toAccountId, BigDecimal amount, String timestamp) {
        this.id = id;
        this.fromAccountId = fromAccountId;
        this.toAccountId = toAccountId;
        this.amount = amount;
        this.timestamp = timestamp;
    }

    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }
    public Long getFromAccountId() { return fromAccountId; }
    public void setFromAccountId(Long fromAccountId) { this.fromAccountId = fromAccountId; }
    public Long getToAccountId() { return toAccountId; }
    public void setToAccountId(Long toAccountId) { this.toAccountId = toAccountId; }
    public BigDecimal getAmount() { return amount; }
    public void setAmount(BigDecimal amount) { this.amount = amount; }
    public String getTimestamp() { return timestamp; }
    // No setTimestamp method to prevent setting timestamp in requests
}